
study 진행 github link
https://github.com/apple77y/todo_react/tree/master

JSX

- 태그의 attribute는 camel로 표기함.
- 모든 요소의 짝이 맞아야함 div로 감싸던지..
- html의 class는 className으로 표기
- 예를들어 document.getElementById('box').className ='some-class'는
	return <div id='box' className='some-class'></div> 와 같고.
	return (
		React.createElement('div', {className : 'some-class'}, null)
	) 와 같다. 그러므로 JSX를 쓸때는 HTML이지만 위와같은 변환과정을 거친다는점을 명심할것
- 내부에 innerHtml을 사용할경우에는 dangerouslySetInnerHTML={{__html: }}를 사용해서 동적 html을 렌더링한다.


Component

- 각각의 component들을 반복하여 render해주는 경우 virtual DOM을 구성하는대 필요한 특정 id가 필요해진다 이 경우 component에 key라는 property를 설정해주어야 한다.


setState

- return으로 state에 추가되는 값을 리턴해주어야함. (etState가 함수를 인자로 넘기면 위내용이 맞고, object를 넘기는 경우에는 해당되지 않는다.)
- setState는 반드시!!! render를 발생시킨다. 상태를 변경하면 렌더링이 발생됨. (state 변경으로 인한 lifecycle를 탄다.)
- setState는 직접 state를 변경 할 수 있지만, 함수를 넘길수도 있다, 첫번째 인자로 비동기 함수를 넘기고, 두번째 인자로 콜백함수를 제공한다, 이 함수는 state변경 후 lifecycle을 모두 탄
이후에 실행된다.
- this.setState(function(prevState){ //여기서 첫번째 인자 prevState가 이전 state 값임. })
- setState는 실행 즉시 동작하는게 아니고 해당 콜스택이 모두 끝난 후에 실행된다. this.setState({todo:false})
console.log(this.state.todo) // 이전 값이 나옴.


life cycle

- ajax나 fetch같은 call은 componentDidMount에 넣는경우가 좋다. component 뼈대가 한번 그려진 시점에 호출
- event에 대한 해제는 componentWillUnmount에 넣는경우가 좋다.
 구형 브라우저의 경우 이벤트 헨들러가 메모리에 누적이 되기 때문


eventHandling

- virtual DOM을 real DOM처럼 핸들링하는건 리엑트의 방법이 아님. 필요하다면 ref라는 참조값을 설정해서 사용하라 최대한 DOM참조 없이 작업을 하는것이 퍼포먼스에 좋다.


functional Component

- this.state
- ref 메서드
- component에 lifeCycle
위 세가지가 들어가는 순간 순수한 함수형 component에서 벗어난다.


PropTypes

- PropTypes는 function형 이든 class 형태이든 상관없이 모두 쓸 수있다.
- 처음부터 data type을 모두정하려고 하지 말고, 프로젝트 완료가 되었을때 좀더 강타입스럽게 dependency를 갖을때 해도 무방하다.

