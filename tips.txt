
JSX

- 태그의 attribute는 camel로 표기함.
- 모든 요소의 짝이 맞아야함 div로 감싸던지..
- html의 class는 className으로 표기
- 예를들어 document.getElementById('box').className ='some-class'는
	return <div id='box' className='some-class'></div> 와 같고.
	return (
		React.createElement('div', {className : 'some-class'}, null)
	) 와 같다. 그러므로 JSX를 쓸때는 HTML이지만 위와같은 변환과정을 거친다는점을 명심할것
- 내부에 innerHtml을 사용할경우에는 dangerouslySetInnerHTML={{__html: }}를 사용해서 동적 html을 렌더링한다.


ref
- react는 항상 가상 DOM으로 작업을 하고 실제 DOM조작을 하지 않는다. 하지만 실제 DOM에 접근하여 다른 라이브러리같은것들을 사용해야할 때가 있는대 이런경우 ref를 씀.
- <input ref='myInput' /> 이라고 설정될때 let input = this.ref.myInput, inputValue = input.value 같이 원시 DOM에 접근이 가능하다

Inline Style
- 자동으로 적절한 단위를 지정하므로 픽셀을 정해줄 필요가없다.

Form
- react로 form요소를 만들때 value값을 직접 하드코딩하면 값을 변경할 수 없다.
-예를들어 input의 값을 value에 넣으면 하드코딩되어 값을 변경할 수 없다. 이는 this.state.inputVal 과같이 state에서
값을 가져오도록 하고,onChange에
handleChange(event){this.setState({inputVal : event.target.value})} 와 같이 핸들러를 붙여주어야한다. 그럼 값이 변경되면 state가 변경되어 value값이
바인딩되어 제대로 노출되게된다.
- 상태가 인터페이스 밖의 자바스크립트 코드에서 완전히 관리된다. 유효성 검사시 유리
- textarea 도 input과 같다.
- select 의경우 속성 value값에 자식 option의 value값을 설정하여 select의 value에 어느option값이 선택되는지 전달한다.

Component

- 각각의 component들을 반복하여 render해주는 경우 virtual DOM을 구성하는대 필요한 특정 id가 필요해진다 이 경우 component에 key라는 property를 설정해주어야 한다.
- key는 트리간에 항목 삽입, 삭제, 대체, 이동이 발생했는지 파악하기 위해 빠른 조회를 가능하도록 하는 고유 식별자. key가 지정되어야 성능 병목 현상을 예방할 수 있다.


functional Component

- this.state
- ref 메서드
- component에 lifeCycle
위 세가지가 들어가는 순간 순수한 함수형 component에서 벗어난다.


setState

- return으로 state에 추가되는 값을 리턴해주어야함. (etState가 함수를 인자로 넘기면 위내용이 맞고, object를 넘기는 경우에는 해당되지 않는다.)
- setState는 반드시!!! render를 발생시킨다. 상태를 변경하면 렌더링이 발생됨. (state 변경으로 인한 lifecycle를 탄다.)
- setState는 직접 state를 변경 할 수 있지만, 함수를 넘길수도 있다, 첫번째 인자로 비동기 함수를 넘기고, 두번째 인자로 콜백함수를 제공한다, 이 함수는 state변경 후 lifecycle을 모두 탄
이후에 실행된다.
- this.setState(function(prevState){ //여기서 첫번째 인자 prevState가 이전 state 값임. })
- setState는 실행 즉시 동작하는게 아니고 해당 콜스택이 모두 끝난 후에 실행된다. this.setState({todo:false})
console.log(this.state.todo) // 이전 값이 나옴.
- this.state를 직접 조작하는것은 금물!! 항상 setState를 통하여 상태관리를 해야한다. 또한 직접 push해버리면 객체나 배열은 참조해서 작업을 하므로 이 경우 setState내부에서 작업하는게 아니라면 항상
 this.state를 map, filter, concat과 같은 메서드를 사용하여 새로운 배열을 리턴한후 setState해야한다.


life cycle

- ajax나 fetch같은 call은 componentDidMount에 넣는경우가 좋다. component 뼈대가 한번 그려진 시점에 호출
- event에 대한 해제는 componentWillUnmount에 넣는경우가 좋다.
 구형 브라우저의 경우 이벤트 헨들러가 메모리에 누적이 되기 때문


eventHandling

- virtual DOM을 real DOM처럼 핸들링하는건 리엑트의 방법이 아님. 필요하다면 ref라는 참조값을 설정해서 사용하라 최대한 DOM참조 없이 작업을 하는것이 퍼포먼스에 좋다.


PropTypes

- PropTypes는 function형 이든 class 형태이든 상관없이 모두 쓸 수있다.
- 처음부터 data type을 모두정하려고 하지 말고, 프로젝트 완료가 되었을때 좀더 강타입스럽게 dependency를 갖을때 해도 무방하다.
- 가장 많이 쓰이는 맵형태 [{},{},{}]의 경우 PropTypes.arrayOf(PropTypes.object)

fetch

- fetch()를 불러들이는 경우, 취득할 리소스를 반드시 인수로 지정하지 않으면 안됩니다. 읽어들인 뒤,  fetch()는 Promise객체를 반환합니다. 리퀘스트가 성공하든 실패하든 해당 리퀘스트 통신에 대한
Response객체가 취득됩니다. fetch()의 두번째 인수는 초기화에 사용되는 객체를 정의하고 있습니다. 이 인수는 기입하지 않아도 함수의 동작에 문제가 없습니다. 이 인수에 대한 상세한 정보는 Request)를
 참고해주시기 바랍니다. 라고 공식문서에 써있슴.
- fetch의 첫번째 .then((response)=>{return response.json()})에서는 response 프로미스 객체가 리턴된다, .json()을 통해 다시 프로미스를 리턴하고, 그걸 받아 두번째
 .then((data)=>{console.log(data)}) 에서 첫번째 then에서 처리한 응답데이터를 받아 로직을 처리한다.